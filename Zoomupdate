##################################################################################
#!/bin/bash                                                                     ##
##################################################################################
## $Rev: 1                                                                      ##
## $Author: ANISH KUMAR ATTELLI                                                 ##
## $Code Review: RABBANI BASHA SHAIK                                            ##
## $Code Optimization: RABBANI BASHA SHAIK                                      ##
## $Date: Tue Oct 20 18:20:00 IST 2020                                          ##
##                                                                              ##
## SCRIPT NAME: zoom_auto_update.sh                                             ##
##                                                                              ##
## USAGE: ./zoom_auto_update.sh or Through Jamf Policy                          ##
##                                                                              ##
## DESCRIPTION: This simple script is used to auto update the Zoom Application  ##                                                      
##              macOS clients.                                                  ##
## DEPENDENCIES: None                                                           ##
##################################################################################

pkgfile="ZoomInstallerIT.pkg"
plistfile="us.zoom.config.plist"
logfile="/Library/ClientEngineering/ZoomInstallScript.log"

# Verify the Architecture of the Client Machine
if [ '`/usr/bin/uname -p`'="i386" -o '`/usr/bin/uname -p`'="x86_64" ]; then
        ## Get OS version and adjust for use with the URL string
        OSvers_URL=$( sw_vers -productVersion | sed 's/[.]/_/g' )

        ## Set the User Agent string for use with curl
        userAgent="Mozilla/5.0 (Macintosh; Intel Mac OS X ${OSvers_URL}) AppleWebKit/535.6.2 (KHTML, like Gecko) Version/5.2 Safari/535.6.2"

        # Identify the latest version of Zoom Application
        latestver=`/usr/bin/curl -s -A "$userAgent" https://zoom.us/download | grep 'ZoomInstallerIT.pkg' | awk -F'/' '{print $3}'`
        echo "Latest Version is: $latestver"

        # Get the version number of the currently-installed Zoom, if any.
        if [ -e "/Applications/zoom.us.app" ]; then
                currentinstalledver=`/usr/bin/defaults read /Applications/zoom.us.app/Contents/Info CFBundleVersion`
                echo "Current installed version is: $currentinstalledver"
                if [ ${latestver} = ${currentinstalledver} ]; then
                        echo "Zoom is current. Exiting"
                        exit 0
                fi
        else
                currentinstalledver="none"
                echo "Zoom is not installed"
        fi

        url="https://zoom.us/client/${latestver}/ZoomInstallerIT.pkg"
        echo "Latest version of the URL is: $url"
        echo "`date`: Download URL: $url" >> ${logfile}

        # Compare the two versions, if they are different or Zoom is not present then download and install the new version.
        if [ "${currentinstalledver}" != "${latestver}" ]; then
        /bin/echo "`date`: Current Zoom version: ${currentinstalledver}" >> ${logfile}
                /bin/echo "`date`: Available Zoom version: ${latestver}" >> ${logfile}
                /bin/echo "`date`: Downloading newer version." >> ${logfile}
                /usr/bin/curl -L -o /tmp/${pkgfile} ${url}
                /bin/echo "`date`: Installing PKG..." >> ${logfile}
                /usr/sbin/installer -allowUntrusted -pkg /tmp/${pkgfile} -target /

                /bin/sleep 10
                /bin/echo "`date`: Deleting downloaded PKG." >> ${logfile}
                /bin/rm -rf /tmp/${pkgfile}

                #double check to see if the new version got updated
                newlyinstalledver=`/usr/bin/defaults read /Applications/zoom.us.app/Contents/Info CFBundleVersion`
                if [ "${latestver}" = "${newlyinstalledver}" ]; then
                /bin/echo "`date`: SUCCESS: Zoom has been updated to version ${newlyinstalledver}" >> ${logfile}
                else
                /bin/echo "`date`: ERROR: Zoom update unsuccessful, version remains at ${currentinstalledver}." >> ${logfile}
                /bin/echo "--" >> ${logfile}
                fi

        # If Zoom is up to date already, just log it and exit.
        else
            /bin/echo "`date`: Zoom is already up to date, running ${currentinstalledver}." >> ${logfile}
            /bin/echo "+-------------------------------------------+" >> ${logfile}
        fi      
else
        /bin/echo "`date`: ERROR: This script is for i386 and x86_64 Architectures only." >> ${logfile}
fi
